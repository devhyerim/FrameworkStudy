<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <context:component-scan base-package="org.springframework.samples.petclinic.web"/>

    <!-- ※ 사용자 정의 Controller 객체 등록 및 URL 매핑 주소 등록 -->
    <!--    - 'name="" ' 속성에 URL 매핑 주소를 등록한다. -->
    <!--      이 과정에서 Front Controller가 갖고 있는 확장자의 형태로 구성한다. -->
    <!--    - 'class="" ' 속성은 Controller 객체의 클래스 경로 및 이름을 등록한다. -->
	
	<!-- dispatcher-servlet.xml
	 - 컨트롤러 객체 등록
	 - URL 매핑 주소 등록
	 - SimpleDriverDataSource 객체 등록
	 - 의존 객체 주입 설정
	 - DAO 객체 등록
	-->
	
	<!-- 1. Connection 을 위한 DataSource 등록 → SimpleDriverDataSource -->
	<bean name="localDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@211.238.142.170:1521:xe"></property>
		<property name="username" value="scott"></property>
		<property name="password" value="tiger"></property>
	</bean>
	
	<!-- ip 변경해서 다른 방식으로 접속 가능 -->
	<bean id="remoteDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="scott"></property>
		<property name="password" value="tiger"></property>
	</bean>
	
	<!-- 2. DAO 등록 -->
	<bean id="employeeDAO" class="com.test.mvc.EmployeeDAO">
		<property name="dataSource" ref="localDataSource"></property>
	</bean>
	<bean id="regionDAO" class="com.test.mvc.RegionDAO">
		<property name="dataSource" ref="localDataSource"></property>
	</bean>
	<bean id="departmentDAO" class="com.test.mvc.DepartmentDAO">
		<property name="dataSource" ref="localDataSource"></property>
	</bean>
	<bean id="positionDAO" class="com.test.mvc.PositionDAO">
		<property name="dataSource" ref="localDataSource"></property>
	</bean>
	
	<!-- 3. 관리자의 Employee 조회 관련 Controller 등록 -->
	<bean name="/employeelist.action" class="com.test.mvc.EmployeeListController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!-- 4. EmployeeInsertForm(입력화면) Controller 등록 -->
	<bean name="/employeeinsertform.action" class="com.test.mvc.EmployeeInsertFormController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!-- 5. Ajax 관련 Controller 등록 -->
	<bean name="/ajax.action" class="com.test.mvc.AjaxController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!-- 6. EmployeeInsert(직원 등록) Controller 등록 -->
	<bean name="/employeeinsert.action" class="com.test.mvc.EmployeeInsertController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!-- 7. EmployeeUpdate(직원 수정) Controller 등록 -->
	<bean name="/employeeupdateform.action" class="com.test.mvc.EmployeeUpdateFormController">
		<property name="employeeDAO" ref="employeeDAO"></property>
		<property name="regionDAO" ref="regionDAO"></property>
		<property name="departmentDAO" ref="departmentDAO"></property>
		<property name="positionDAO" ref="positionDAO"></property>
	</bean>
	
	<!-- 8. EmployeeUpdate(직원 수정 액션 수행) Controller 등록 -->
	<bean name="/employeeupdate.action" class="com.test.mvc.EmployeeUpdateController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!-- 9. EmployeeDelete(직원 삭제 액션 수행) Controller 등록 -->
	<bean name="/employeedelete.action" class="com.test.mvc.EmployeeDeleteController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!-- 10. Login 및 Logout 관련 Controller 등록 -->
	<bean name="/loginform.action" class="com.test.mvc.LoginFormController"></bean>
	
	<bean name="/login.action" class="com.test.mvc.LoginController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<bean name="/logout.action" class="com.test.mvc.LogoutController">
	</bean>
	
	<!-- 11. 일반 직원들의 직원 조회 EmpListController 등록  -->
	<bean name="/emplist.action" class="com.test.mvc.EmpListController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!-- 12. 부서 조회 DepartmentListController 등록 -->
	<bean name="/departmentlist.action" class="com.test.mvc.DepartmentListController">
		<property name="dao" ref="departmentDAO"></property>
	</bean>
	
	<!-- 13. 부서 등록(입력) DepartmentInsertFormController 등록 -->
	<bean name="/departmentinsertform.action" class="com.test.mvc.DepartmentInsertFormController"></bean>
	
	<!-- 14. 부서 등록 액션 처리 DepartmentInsertController 등록 -->
	<bean name="/departmentinsert.action" class="com.test.mvc.DepartmentInsertController">
		<property name="dao" ref="departmentDAO"></property>
	</bean>
	
	<!-- 15. 부서 수정 입력폼 DepartmentUpdateFormController 등록 -->
	<bean name="/departmentupdateform.action" class="com.test.mvc.DepartmentUpdateFormController">
		<property name="dao" ref="departmentDAO"></property>
	</bean>
	
	<!-- 16. 부서 수정 액션 처리 DepartmentUpdateController 등록 -->
	<bean name="/departmentupdate.action" class="com.test.mvc.DepartmentUpdateController">
		<property name="dao" ref="departmentDAO"></property>
	</bean>
	
	
</beans>